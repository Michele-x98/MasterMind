Estendibilità
L’utilizzo del principio solid ha comportato una serie di benefici per questo progetto, la più importnte tra queste è l’estendibilità:
Attraverso l’utilizzo di interfacce abbiamo stabilito una base su cui in futuro, sia possibile ampliare il progetto.Un primo esempio lo troviamo nell’astrazione del Model dove il possibile miglioramento potrebbe essere aggiunto modificando le strutture dati del Campo con un tempo inferiore a quelle correnti, oppure, un esempio confutato è quello delle Impostazioni dove abbiamo creato due classi, una che permette di salvare i dati su di un file .properties e un’altra che salva i dati nella classe ImpostazioniClasse.
Un’altra possibile implementazione potrebbe essere di andare a salvare le impostazioni in un server remoto ed andarle a richiedere di volta in volta con una Socket.
UN ulteriore esempio di estendibilità lo troviamo nella View del nostro progetto dove, attraverso l’interfaccia MMView potremmo sostituire la console come mezzo di comunicazione con l’utente con un’interfaccia grafica che renderebbe il gioco più User Friendly.
// Per il MatchCoordinator non so che scrivece
Attraverso L’enum di PlayerType è possibile aggiungere Player senza riscrivere porzioni di codice

Log
Per portare i log all’interno di questo progetto abbiamo deciso di utilizzare java.util.logging.
Inzialmente abbiamo creato una classe che si occupa di gestire i log creando un filehandler e impostando i parametri che più si addicessero al progetto. 
Attraverso il metodo statico init si genera il filehandler iniziale per i log, successivamente per ogni classe abbiamo il proprio logger creato con il metodo statico getLogger ed otterrà lo stesso filehandler.
I log finiscono in un file all’interno della cartella “src/main/resources” che ha un nome diverso per ogni avvio del programma attraverso l’ora e la data.
